<?xml version="1.0" ?>
<sdf version="1.5">
  <world name="default">
    <!-- A global light source -->
    <include>
      <uri>model://sun</uri>
    </include>
<!--     <include>
      <uri>model://water_level</uri>
    </include> -->
    <include>
      <uri>model://ocean</uri>
    </include>

    <!--include>
      <pose> 0 0 0 0 0 0 </pose>
      <uri>model://sandisland</uri>
    </include-->
    <!--model name="terrain">
      <include>
        <uri>model://winding_valley_heightmap</uri>
      </include>
    </model-->

    <!--model name="catabot"-->
    <model name="boat">
    <pose>0 0 0 0 0 0</pose>
      <include>
        <uri>model://boat</uri>
      </include>
      
      <!-- add new camera -->
      <link name='camera'>
        <pose>0.57 0.0 0.7 1.57 0 1.57</pose> <!-- change camaera location -->
        <!--pose>0.57 0.0 0.7 1.91986 0 1.57</pose-->
        <inertial>
          <pose>0 0 0 0 0 0</pose>
          <mass>0.1</mass>
          <inertia>
            <ixx>0.001</ixx>
            <ixy>0</ixy>
            <ixz>0</ixz>
            <iyy>0.001</iyy>
            <iyz>0</iyz>
            <izz>0.001</izz>
          </inertia>
        </inertial>
        <!--visual name='visual'>
          <pose>0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>0944
              <radius>0.025</radius>
              <length>0.025</length>
            </cylinder>
          </geometry>
           <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Grey</name>
            </script>
          </material>
        </visual-->

          <sensor name="camera" type="camera">
              <pose>0 0 0 -1.57 -1.57 0</pose>
              <camera>
                <horizontal_fov>1.0472</horizontal_fov>
                <image>
                  <width>640</width>
                  <height>480</height>
                </image>
                <clip>
                  <near>0.05</near>
                  <far>1000</far>
                </clip>
              </camera>
              <always_on>1</always_on>
              <update_rate>10</update_rate>
              <visualize>true</visualize>

             <!--  <plugin name="irlock" filename="libArduCopterIRLockPlugin.so">
                  <fiducial>irlock_beacon_01</fiducial>
              </plugin> -->
              <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
              <alwaysOn>true</alwaysOn>
              <updateRate>0.0</updateRate>
              <cameraName>webcam</cameraName>
              <imageTopicName>image_raw</imageTopicName>
              <cameraInfoTopicName>camera_info</cameraInfoTopicName>
              <frameName>camera_link</frameName>
              <hackBaseline>0.07</hackBaseline>
              <distortionK1>0.0</distortionK1>
              <distortionK2>0.0</distortionK2>
              <distortionK3>0.0</distortionK3>
              <distortionT1>0.0</distortionT1>
              <distortionT2>0.0</distortionT2>
          </plugin>

        </sensor>

      </link>

      <!-- attach camera -->
      <joint type="revolute" name="base_camera_joint">
        <pose>0 0 0.0 0 0 0</pose>
        <parent>boat::base_link</parent>
        <child>camera</child>
        <axis>
          <limit>
            <lower>0</lower>
            <upper>0</upper>
          </limit>
          <xyz>0 0 1</xyz>
          <use_parent_model_frame>true</use_parent_model_frame>
        </axis>
      </joint>

      <link name='velodyne'>
        <pose frame=''>0.2 0 1.3 0 -0 0</pose>
        <inertial>
          <pose frame=''>0 0 0.138199 0 -0 0</pose>
          <mass>0.2</mass>
          <inertia>
            <ixx>3.52702</ixx>
            <ixy>0</ixy>
            <ixz>0</ixz>
            <iyy>3.52702</iyy>
            <iyz>0</iyz>
            <izz>3.00202</izz>
          </inertia>
        </inertial>
        <collision name='velodyne_lump_fixed_joint__base_link_collision'>
          <pose frame=''>0 0 0.05 0 -0 0</pose>
          <geometry>
            <box>
              <size>0.5 0.5 0.1</size>
            </box>
          </geometry>
        </collision>
        <collision name='velodyne_fixed_joint_lump__velodyne_base_link_collision_2'>
          <pose frame=''>0 0 0.48585 0 -0 0</pose>
          <geometry>
            <cylinder>
              <length>0.0717</length>
              <radius>0.0516</radius>
            </cylinder>
          </geometry>
        </collision>
        <visual name='velodyne_fixed_joint_lump__base_link_visual'>
          <pose frame=''>0 0 0.05 0 -0 0</pose>
          <geometry>
            <box>
              <size>0.5 0.5 0.1</size>
            </box>
          </geometry>
        </visual>
        <visual name='velodyne_fixed_joint_lump__velodyne_base_link_visual_1'>
          <pose frame=''>0 0 0.45 0 -0 0</pose>
          <geometry>
            <mesh>
              <scale>1 1 1</scale>
              <uri>model://boat/meshes/VLP16_base_1.dae</uri>
            </mesh>
          </geometry>
        </visual>
        <visual name='base_footprint_fixed_joint_lump__velodyne_base_link_visual_2'>
          <pose frame=''>0 0 0.45 0 -0 0</pose>
          <geometry>
            <mesh>
              <scale>1 1 1</scale>
              <uri>model://boat/meshes/VLP16_base_2.dae</uri>
            </mesh>
          </geometry>
        </visual>
        <visual name='velodyne_fixed_joint_lump__velodyne_visual_3'>
          <pose frame=''>0 0 0.45 0 -0 0</pose>
          <geometry>
            <mesh>
              <scale>1 1 1</scale>
              <uri>model://boat/meshes/VLP16_scan.dae</uri>
            </mesh>
          </geometry>
          <material>
            <script>
              <uri>__default__</uri>
              <name>__default__</name>
            </script>
          </material>
        </visual>

        <velocity_decay/>
        <gravity>1</gravity>
        <velocity_decay/>

        <self_collide>0</self_collide>
        <!-- not using GPU -->
        <!--sensor name='velodyne-VLP16' type='ray'-->
        <sensor name='velodyne' type='gpu_ray'>
        <!-- using GPU -->
        <pose>0.1 0 0 0 0 0</pose>
        <visualize>true</visualize>
        <update_rate>10</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>1024</samples> <!-- original 1024 -->
              <resolution>1</resolution> <!-- original 1-->
              <min_angle>-1.0472</min_angle>
              <max_angle>1.0472</max_angle>
            </horizontal>
            <vertical>
              <samples>32</samples>
              <resolution>1</resolution> <!-- original 1-->
              <min_angle>-0.261799</min_angle>
              <max_angle>0.261799</max_angle>
            </vertical>
          </scan>
          <range>
            <min>0.3</min>
            <max>30</max>
            <resolution>0.001</resolution>
          </range>
          <noise>
            <type>gaussian</type>
            <mean>0</mean>
            <stddev>0.01</stddev>
          </noise>
        </ray>
        <!--plugin name='gazebo_ros_laser_controller' filename='libgazebo_ros_velodyne_laser.so'-->
        <plugin name='gazebo_ros_head_hokuyo_controller' filename='libgazebo_ros_gpu_laser.so'>
          <topicName>velodynepoint</topicName>
          <frameName>map</frameName>
          <min_range>0.3</min_range>
          <max_range>30</max_range>
          <gaussianNoise>0.001</gaussianNoise>
          <!-- for GPU to prevent reflection by ocean-->
          <min_intensity>-1</min_intensity>
        </plugin>
        <pose frame=''>0 0 0.4877 0 -0 0</pose>
        </sensor>
      </link>

      <joint name="velodyne_joint" type="fixed">
        <pose>0 0 0 0 0 0</pose>
        <parent>boat::base_link</parent>
        <child>velodyne</child>
      </joint>
      
      <link name='sonar'>
        <pose frame=''>0 0 -0.6 0 -0 0</pose>
        <inertial>
          <pose frame=''>0 0 0.138199 0 -0 0</pose>
          <mass>0.001</mass>
          <inertia>
            <ixx>0.000000017</ixx>
            <ixy>0</ixy>
            <ixz>0</ixz>
            <iyy>0.000000017</iyy>
            <iyz>0</iyz>
            <izz>0.000000017</izz>
          </inertia>
        </inertial>
        <collision name='sonar_joint_base_joint_collision'>
          <pose frame=''>0 0 0 0 -0 0</pose>
          <geometry>
            <box> 
              <size>0.5 0.5 0.1</size>
            </box>
          </geometry>
        </collision>
        <visual name='sonar_joint_visual_1'>
          <pose frame=''>0 0 0 0 -0 0</pose>
          <geometry>
            <mesh>
              <scale>10 10 10</scale>
              <uri>model://boat/meshes/max_sonar_ez4.dae</uri>
            </mesh>
          </geometry>
        </visual>
        <sensor name='sonar' type='ray'>
        <pose>0 0 0 0 0 0</pose>
        <visualize>true</visualize>
        <update_rate>30</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>5</samples> <!-- original 1024 -->
              <resolution>1</resolution> <!-- original 1-->
              <min_angle>-1.0472</min_angle>
              <max_angle>1.0472</max_angle>
            </horizontal>
            <vertical>
              <samples>5</samples>
              <resolution>1</resolution> <!-- original 1-->
              <min_angle>-0.174533</min_angle>
              <max_angle>0.174533</max_angle>
            </vertical>
          </scan>
          <range>
            <min>0.3</min>
            <max>20</max>
            <resolution>0.001</resolution>
          </range>
          <noise>
            <type>gaussian</type>
            <mean>0</mean>
            <stddev>0.01</stddev>
          </noise>
        </ray>
        <!--plugin name='gazebo_ros_sonar_controller' filename='libgazebo_ros_velodyne_laser.so'-->
        <plugin name='ultrasonic_sensor_1' filename='libgazebo_ros_range.so'>
          <gaussianNoise>0.001</gaussianNoise>
          <alwaysOn>true</alwaysOn>
          <updateRate>30</updateRate>
          <topicName>sonarpoints</topicName>
          <radiation>ultrasound</radiation>
          <frameName>map</frameName>
          <fov>0.3</fov>
          <!-- for GPU to prevent reflection by ocean-->
          <min_intensity>-1</min_intensity>
        </plugin>
        <pose frame=''>0 0 0 0 -0 0</pose>
        </sensor>
      </link>

      <joint name="sonar_joint" type="fixed">
        <pose>0 0 0 0 0 0</pose>
        <parent>boat::base_link</parent>
        <child>sonar</child>
      </joint>
    </model>

     <physics name='default_physics' default='0' type='ode'>
<!--       <gravity>0 0 -9.8066</gravity>
      <ode>
        <solver>
          <type>quick</type>
          <iters>10</iters>
          <sor>1.3</sor>
          <use_dynamic_moi_rescaling>0</use_dynamic_moi_rescaling>
        </solver>
        <constraints>
          <cfm>0</cfm>
          <erp>0.2</erp>
          <contact_max_correcting_vel>100</contact_max_correcting_vel>
          <contact_surface_layer>0.001</contact_surface_layer>
        </constraints>
      </ode>
      <max_step_size>0.004</max_step_size>
      <real_time_factor>1</real_time_factor>
      <real_time_update_rate>0</real_time_update_rate>
      <magnetic_field>6.0e-6 2.3e-5 -4.2e-5</magnetic_field> -->
       <ode>
        <solver>
          <type>quick</type>
          <iters>100</iters>
          <sor>1.0</sor>
        </solver>
        <constraints>
          <cfm>0.0</cfm>
          <erp>0.9</erp>
          <contact_max_correcting_vel>0.1</contact_max_correcting_vel>
          <contact_surface_layer>0.0</contact_surface_layer>
        </constraints>
      </ode>
      <real_time_update_rate>-1</real_time_update_rate>
    </physics>
  </world>
</sdf>
